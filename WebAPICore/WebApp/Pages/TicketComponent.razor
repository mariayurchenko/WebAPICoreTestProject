@page "/tickets/{ticketId:int}"
@page "/projects/{projectId:int}/addticket"

@attribute [Authorize]

@inject ITicketsScreenUseCases _ticketsScreenUseCases
@inject ITicketScreenUseCases _ticketScreenUseCases
@inject NavigationManager _navigationManager

<h3>Ticket @TicketId</h3>
<br />

<AlertComponent @ref="_alertComponent"></AlertComponent>

@if (_ticket != null)
{
    <EditForm Model="_ticket" OnValidSubmit="Save">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="mb-3">
            <label for="title" class="col-form-label">Title</label>
            <InputText type="" class="form-control" id="title" @bind-Value="_ticket.Title" />
        </div>
        <div class="mb-3">
            <label for="description" class="col-form-label">Description</label>
            <InputText type="" class="form-control" id="description" @bind-Value="_ticket.Description" />
        </div>
        <div class="mb-3">
            <label for="owner" class="col-form-label">Owner</label>
            <InputText type="" class="form-control" id="owner" @bind-Value="_ticket.Owner" readonly />
        </div>
        <div class="mb-3">
            <label for="reportDate" class="col-form-label">Report Date</label>
            <InputDate type="" class="form-control" id="reportDate" @bind-Value="_ticket.ReportDate" />
        </div>
        <div class="mb-3">
            <label for="dueDate" class="col-form-label">Due Date</label>
            <InputDate type="" class="form-control" id="dueDate" @bind-Value="_ticket.DueDate" />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        &nbsp;
        @if (TicketId.HasValue)
        {
            <button class="btn btn-danger" type="button" @onclick="DeleteTicket">Delete</button>
        }

    </EditForm>
}


@code {

    Ticket _ticket;
    AlertComponent _alertComponent;

    [Parameter]
    public int? TicketId { get; set; }

    [Parameter]
    public int? ProjectId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (TicketId.HasValue)
            _ticket = await _ticketsScreenUseCases.ViewTicketById(TicketId.Value);

        if(ProjectId.HasValue && _ticket == null)
            _ticket = new Ticket {ProjectId = ProjectId.Value};
    }

    async Task Save()
    {
        var isValidate = true;

        if (!_ticket.ValidationDescription())
        {
            _alertComponent.ErrorMessage = "Description is required";
            _alertComponent.Show();
            isValidate = false;
        }
        if (!_ticket.ValidateFutureDueDate())
        {
            _alertComponent.ErrorMessage = "The Due Date must be in the future.";
            _alertComponent.Show();
            isValidate = false;
        }
        if (!_ticket.ValidateReportDatePresence())
        {
            _alertComponent.ErrorMessage = "The Report Date is required.";
            _alertComponent.Show();
            isValidate = false;
        }
        if (!_ticket.ValidateDueDateAfterReportDate())
        {
            _alertComponent.ErrorMessage = "The Due Date must be later the Report Date.";
            _alertComponent.Show();
            isValidate = false;
        }
        if (isValidate)
        {
            if (TicketId.HasValue)
                await _ticketsScreenUseCases.UpdateTicket(_ticket);
            else
                await _ticketScreenUseCases.AddTickets(_ticket);

            _navigationManager.NavigateTo($"/projects/{_ticket.ProjectId}/tickets");
        }
    }

    async Task DeleteTicket()
    {
        if (TicketId.HasValue)
        {
            await _ticketScreenUseCases.DeleteTicket(TicketId.Value);

            _navigationManager.NavigateTo($"/projects/{_ticket.ProjectId}/tickets");
        }
    }

}
